"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@edgestore";
exports.ids = ["vendor-chunks/@edgestore"];
exports.modules = {

/***/ "(ssr)/./node_modules/@edgestore/react/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@edgestore/react/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEdgeStoreProvider: () => (/* binding */ createEdgeStoreProvider)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\nclass EdgeStoreError extends Error {\n    constructor(message){\n        super(message);\n        this.name = 'EdgeStoreError';\n    }\n}\n\nfunction createNextProxy({ apiPath, uploadingCountRef, maxConcurrentUploads = 5 }) {\n    return new Proxy({}, {\n        get (_, prop) {\n            const bucketName = prop;\n            const bucketFunctions = {\n                upload: async (params)=>{\n                    try {\n                        params.onProgressChange?.(0);\n                        while(uploadingCountRef.current >= maxConcurrentUploads && uploadingCountRef.current > 0){\n                            await new Promise((resolve)=>setTimeout(resolve, 300));\n                        }\n                        uploadingCountRef.current++;\n                        return await uploadFile(params, {\n                            bucketName: bucketName,\n                            apiPath\n                        });\n                    } finally{\n                        uploadingCountRef.current--;\n                    }\n                },\n                confirmUpload: async (params)=>{\n                    const { success } = await confirmUpload(params, {\n                        bucketName: bucketName,\n                        apiPath\n                    });\n                    if (!success) {\n                        throw new EdgeStoreError('Failed to confirm upload');\n                    }\n                },\n                delete: async (params)=>{\n                    const { success } = await deleteFile(params, {\n                        bucketName: bucketName,\n                        apiPath\n                    });\n                    if (!success) {\n                        throw new EdgeStoreError('Failed to delete file');\n                    }\n                }\n            };\n            return bucketFunctions;\n        }\n    });\n}\nasync function uploadFile({ file, input, onProgressChange, options }, { apiPath, bucketName }) {\n    try {\n        onProgressChange?.(0);\n        const res = await fetch(`${apiPath}/request-upload`, {\n            method: 'POST',\n            body: JSON.stringify({\n                bucketName,\n                input,\n                fileInfo: {\n                    extension: file.name.split('.').pop(),\n                    type: file.type,\n                    size: file.size,\n                    fileName: options?.manualFileName,\n                    replaceTargetUrl: options?.replaceTargetUrl,\n                    temporary: options?.temporary\n                }\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n        const json = await res.json();\n        if ('multipart' in json) {\n            await multipartUpload({\n                bucketName,\n                multipartInfo: json.multipart,\n                onProgressChange,\n                file,\n                apiPath\n            });\n        } else if ('uploadUrl' in json) {\n            // Single part upload\n            // Upload the file to the signed URL and get the progress\n            await uploadFileInner(file, json.uploadUrl, onProgressChange);\n        } else {\n            throw new EdgeStoreError('An error occurred');\n        }\n        return {\n            url: getUrl(json.accessUrl, apiPath),\n            thumbnailUrl: json.thumbnailUrl ? getUrl(json.thumbnailUrl, apiPath) : null,\n            size: json.size,\n            uploadedAt: new Date(json.uploadedAt),\n            path: json.path,\n            pathOrder: json.pathOrder,\n            metadata: json.metadata\n        };\n    } catch (e) {\n        onProgressChange?.(0);\n        throw e;\n    }\n}\n/**\n * Protected files need third-party cookies to work.\n * Since third party cookies doesn't work on localhost,\n * we need to proxy the file through the server.\n */ function getUrl(url, apiPath) {\n    if ( true && !url.includes('/_public/')) {\n        const proxyUrl = new URL(window.location.origin);\n        proxyUrl.pathname = `${apiPath}/proxy-file`;\n        proxyUrl.search = new URLSearchParams({\n            url\n        }).toString();\n        return proxyUrl.toString();\n    }\n    return url;\n}\nconst uploadFileInner = async (file, uploadUrl, onProgressChange)=>{\n    const promise = new Promise((resolve, reject)=>{\n        const request = new XMLHttpRequest();\n        request.open('PUT', uploadUrl);\n        request.addEventListener('loadstart', ()=>{\n            onProgressChange?.(0);\n        });\n        request.upload.addEventListener('progress', (e)=>{\n            if (e.lengthComputable) {\n                // 2 decimal progress\n                const progress = Math.round(e.loaded / e.total * 10000) / 100;\n                onProgressChange?.(progress);\n            }\n        });\n        request.addEventListener('error', ()=>{\n            reject(new Error('Error uploading file'));\n        });\n        request.addEventListener('abort', ()=>{\n            reject(new Error('File upload aborted'));\n        });\n        request.addEventListener('loadend', ()=>{\n            // Return the ETag header (needed to complete multipart upload)\n            resolve(request.getResponseHeader('ETag'));\n        });\n        request.send(file);\n    });\n    return promise;\n};\nasync function multipartUpload(params) {\n    const { bucketName, multipartInfo, onProgressChange, file, apiPath } = params;\n    const { partSize, parts, totalParts, uploadId, key } = multipartInfo;\n    const uploadingParts = [];\n    const uploadPart = async (params)=>{\n        const { part, chunk } = params;\n        const { uploadUrl } = part;\n        const eTag = await uploadFileInner(chunk, uploadUrl, (progress)=>{\n            const uploadingPart = uploadingParts.find((p)=>p.partNumber === part.partNumber);\n            if (uploadingPart) {\n                uploadingPart.progress = progress;\n            } else {\n                uploadingParts.push({\n                    partNumber: part.partNumber,\n                    progress\n                });\n            }\n            const totalProgress = Math.round(uploadingParts.reduce((acc, p)=>acc + p.progress * 100, 0) / totalParts) / 100;\n            onProgressChange?.(totalProgress);\n        });\n        if (!eTag) {\n            throw new EdgeStoreError('Could not get ETag from multipart response');\n        }\n        return {\n            partNumber: part.partNumber,\n            eTag\n        };\n    };\n    // Upload the parts in parallel\n    const completedParts = await queuedPromises({\n        items: parts.map((part)=>({\n                part,\n                chunk: file.slice((part.partNumber - 1) * partSize, part.partNumber * partSize)\n            })),\n        fn: uploadPart,\n        maxParallel: 5,\n        maxRetries: 10\n    });\n    // Complete multipart upload\n    const res = await fetch(`${apiPath}/complete-multipart-upload`, {\n        method: 'POST',\n        body: JSON.stringify({\n            bucketName,\n            uploadId,\n            key,\n            parts: completedParts\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    if (!res.ok) {\n        throw new EdgeStoreError('Multi-part upload failed');\n    }\n}\nasync function confirmUpload({ url }, { apiPath, bucketName }) {\n    const res = await fetch(`${apiPath}/confirm-upload`, {\n        method: 'POST',\n        body: JSON.stringify({\n            url,\n            bucketName\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    if (!res.ok) {\n        throw new EdgeStoreError('An error occurred');\n    }\n    return res.json();\n}\nasync function deleteFile({ url }, { apiPath, bucketName }) {\n    const res = await fetch(`${apiPath}/delete-file`, {\n        method: 'POST',\n        body: JSON.stringify({\n            url,\n            bucketName\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    if (!res.ok) {\n        throw new EdgeStoreError('An error occurred');\n    }\n    return res.json();\n}\nasync function queuedPromises({ items, fn, maxParallel, maxRetries = 0 }) {\n    const results = new Array(items.length);\n    const executeWithRetry = async (func, retries)=>{\n        try {\n            return await func();\n        } catch (error) {\n            if (retries > 0) {\n                await new Promise((resolve)=>setTimeout(resolve, 5000));\n                return executeWithRetry(func, retries - 1);\n            } else {\n                throw error;\n            }\n        }\n    };\n    const semaphore = {\n        count: maxParallel,\n        async wait () {\n            // If we've reached our maximum concurrency or it's the last item, wait\n            while(this.count <= 0)await new Promise((resolve)=>setTimeout(resolve, 500));\n            this.count--;\n        },\n        signal () {\n            this.count++;\n        }\n    };\n    const tasks = items.map((item, i)=>(async ()=>{\n            await semaphore.wait();\n            try {\n                const result = await executeWithRetry(()=>fn(item), maxRetries);\n                results[i] = result;\n            } finally{\n                semaphore.signal();\n            }\n        })());\n    await Promise.all(tasks);\n    return results;\n}\n\nconst DEFAULT_BASE_URL = process.env.NEXT_PUBLIC_EDGE_STORE_BASE_URL ?? 'https://files.edgestore.dev';\nfunction createEdgeStoreProvider(opts) {\n    const EdgeStoreContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(undefined);\n    const EdgeStoreProvider = ({ children, basePath })=>{\n        return EdgeStoreProviderInner({\n            children,\n            context: EdgeStoreContext,\n            basePath,\n            maxConcurrentUploads: opts?.maxConcurrentUploads\n        });\n    };\n    function useEdgeStore() {\n        if (!EdgeStoreContext) {\n            throw new Error('React Context is unavailable in Server Components');\n        }\n        // @ts-expect-error - We know that the context value should not be undefined\n        const value = react__WEBPACK_IMPORTED_MODULE_0__.useContext(EdgeStoreContext);\n        if (!value && \"development\" !== 'production') {\n            throw new Error('[edgestore]: `useEdgeStore` must be wrapped in a <EdgeStoreProvider />');\n        }\n        return value;\n    }\n    return {\n        EdgeStoreProvider,\n        useEdgeStore\n    };\n}\nfunction EdgeStoreProviderInner({ children, context, basePath, maxConcurrentUploads }) {\n    const apiPath = basePath ? `${basePath}` : '/api/edgestore';\n    const uploadingCountRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        void init();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    async function init() {\n        const res = await fetch(`${apiPath}/init`, {\n            method: 'POST'\n        });\n        if (res.ok) {\n            const json = await res.json();\n            await fetch(`${DEFAULT_BASE_URL}/_init`, {\n                method: 'GET',\n                headers: {\n                    'x-edgestore-token': json.token\n                }\n            });\n        }\n    }\n    async function reset() {\n        await init();\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(context.Provider, {\n        value: {\n            edgestore: createNextProxy({\n                apiPath,\n                uploadingCountRef,\n                maxConcurrentUploads\n            }),\n            reset\n        }\n    }, children));\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@edgestore/react/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@edgestore/server/dist/adapters/next/app/index.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@edgestore/server/dist/adapters/next/app/index.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEdgeStoreNextHandler: () => (/* binding */ createEdgeStoreNextHandler)\n/* harmony export */ });\n/* harmony import */ var _shared_6dea9e91_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../shared-6dea9e91.mjs */ \"(rsc)/./node_modules/@edgestore/server/dist/shared-6dea9e91.mjs\");\n/* harmony import */ var _providers_edgestore_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../providers/edgestore/index.mjs */ \"(rsc)/./node_modules/@edgestore/server/dist/providers/edgestore/index.mjs\");\n/* harmony import */ var _panva_hkdf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @panva/hkdf */ \"(rsc)/./node_modules/@panva/hkdf/dist/node/esm/index.js\");\n/* harmony import */ var cookie__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cookie */ \"(rsc)/./node_modules/cookie/index.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/esm/index.js\");\n/* harmony import */ var _index_30a3741e_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../index-30a3741e.mjs */ \"(rsc)/./node_modules/@edgestore/server/dist/index-30a3741e.mjs\");\n\n\n\n\n\n\n\n\nfunction createEdgeStoreNextHandler(config) {\n    const { provider = (0,_providers_edgestore_index_mjs__WEBPACK_IMPORTED_MODULE_1__.EdgeStoreProvider)() } = config;\n    return async (req)=>{\n        try {\n            if (req.nextUrl.pathname === \"/api/edgestore/init\") {\n                const ctx = \"createContext\" in config ? await config.createContext({\n                    req\n                }) : {};\n                const { newCookies, token, baseUrl } = await (0,_shared_6dea9e91_mjs__WEBPACK_IMPORTED_MODULE_0__.i)({\n                    ctx,\n                    provider,\n                    router: config.router\n                });\n                const res = new Response(JSON.stringify({\n                    token,\n                    baseUrl\n                }), {\n                    status: 200,\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n                for (const cookie of newCookies){\n                    res.headers.append(\"Set-Cookie\", cookie);\n                }\n                return res;\n            } else if (req.nextUrl.pathname === \"/api/edgestore/request-upload\") {\n                const res = await (0,_shared_6dea9e91_mjs__WEBPACK_IMPORTED_MODULE_0__.r)({\n                    provider,\n                    router: config.router,\n                    body: await req.json(),\n                    ctxToken: req.cookies.get(\"edgestore-ctx\")?.value\n                });\n                return new Response(JSON.stringify(res), {\n                    status: 200,\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n            } else if (req.nextUrl.pathname === \"/api/edgestore/request-upload-parts\") {\n                const res = await (0,_shared_6dea9e91_mjs__WEBPACK_IMPORTED_MODULE_0__.a)({\n                    provider,\n                    router: config.router,\n                    body: await req.json(),\n                    ctxToken: req.cookies.get(\"edgestore-ctx\")?.value\n                });\n                return new Response(JSON.stringify(res), {\n                    status: 200,\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n            } else if (req.nextUrl.pathname === \"/api/edgestore/complete-multipart-upload\") {\n                await (0,_shared_6dea9e91_mjs__WEBPACK_IMPORTED_MODULE_0__.c)({\n                    provider,\n                    router: config.router,\n                    body: await req.json(),\n                    ctxToken: req.cookies.get(\"edgestore-ctx\")?.value\n                });\n                return new Response(null, {\n                    status: 200\n                });\n            } else if (req.nextUrl.pathname === \"/api/edgestore/confirm-upload\") {\n                const res = await (0,_shared_6dea9e91_mjs__WEBPACK_IMPORTED_MODULE_0__.b)({\n                    provider,\n                    router: config.router,\n                    body: await req.json(),\n                    ctxToken: req.cookies.get(\"edgestore-ctx\")?.value\n                });\n                return new Response(JSON.stringify(res), {\n                    status: 200,\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n            } else if (req.nextUrl.pathname === \"/api/edgestore/delete-file\") {\n                const res = await (0,_shared_6dea9e91_mjs__WEBPACK_IMPORTED_MODULE_0__.d)({\n                    provider,\n                    router: config.router,\n                    body: await req.json(),\n                    ctxToken: req.cookies.get(\"edgestore-ctx\")?.value\n                });\n                return new Response(JSON.stringify(res), {\n                    status: 200,\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n            } else if (req.nextUrl.pathname === \"/api/edgestore/proxy-file\") {\n                const url = req.nextUrl.searchParams.get(\"url\");\n                if (typeof url === \"string\") {\n                    const proxyRes = await fetch(url, {\n                        headers: {\n                            cookie: req.cookies.toString() ?? \"\"\n                        }\n                    });\n                    const data = await proxyRes.arrayBuffer();\n                    return new Response(data, {\n                        status: proxyRes.status,\n                        headers: {\n                            \"Content-Type\": proxyRes.headers.get(\"Content-Type\") ?? \"application/octet-stream\"\n                        }\n                    });\n                } else {\n                    return new Response(null, {\n                        status: 400\n                    });\n                }\n            } else {\n                return new Response(null, {\n                    status: 404\n                });\n            }\n        } catch (err) {\n            if (err instanceof _shared_6dea9e91_mjs__WEBPACK_IMPORTED_MODULE_0__.E) {\n                return new Response(err.message, {\n                    status: _shared_6dea9e91_mjs__WEBPACK_IMPORTED_MODULE_0__.e[err.code]\n                });\n            } else if (err instanceof Error) {\n                return new Response(err.message, {\n                    status: 500\n                });\n            }\n            return new Response(\"Internal server error\", {\n                status: 500\n            });\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/server/dist/adapters/next/app/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@edgestore/server/dist/index-30a3741e.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@edgestore/server/dist/index-30a3741e.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   E: () => (/* binding */ EdgeStoreCredentialsError),\n/* harmony export */   e: () => (/* binding */ edgeStoreRawSdk),\n/* harmony export */   i: () => (/* binding */ initEdgeStoreSdk)\n/* harmony export */ });\nconst DEFAULT_MESSAGE = `Missing EDGE_STORE_ACCESS_KEY or EDGE_STORE_SECRET_KEY. \nThis can happen if you are trying to use the vanilla client in your frontend.\nThe vanilla client should only be used in the backend.`;\nclass EdgeStoreCredentialsError extends Error {\n    constructor(message = DEFAULT_MESSAGE){\n        super(message);\n        this.name = \"EdgeStoreCredentialsError\";\n    }\n}\nconst API_ENDPOINT = process.env.EDGE_STORE_API_ENDPOINT ?? \"https://api.edgestore.dev\";\nasync function makeRequest(params) {\n    const { body, accessKey, secretKey, path } = params;\n    const res = await fetch(`${API_ENDPOINT}${path}`, {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Basic ${Buffer.from(`${accessKey}:${secretKey}`).toString(\"base64\")}`\n        }\n    });\n    if (!res.ok) {\n        throw new Error(`Failed to make request to ${path}: ${await res.text()}`);\n    }\n    return await res.json();\n}\nconst edgeStoreRawSdk = {\n    async getToken (params) {\n        const reqBuckets = Object.entries(params.router.buckets).reduce((acc, [bucketName, bucket])=>{\n            acc[bucketName] = {\n                path: bucket._def.path.map((p)=>{\n                    const paramEntries = Object.entries(p);\n                    if (paramEntries[0] === undefined) {\n                        throw new Error(\"Missing path param\");\n                    }\n                    const [key, value] = paramEntries[0];\n                    return {\n                        key,\n                        value: value()\n                    };\n                }),\n                accessControl: bucket._def.accessControl\n            };\n            return acc;\n        }, {});\n        const { token } = await makeRequest({\n            body: {\n                ctx: params.ctx,\n                buckets: reqBuckets\n            },\n            accessKey: params.accessKey,\n            secretKey: params.secretKey,\n            path: \"/get-token\"\n        });\n        return token;\n    },\n    async getFile ({ accessKey, secretKey, url }) {\n        return await makeRequest({\n            path: \"/get-file\",\n            accessKey,\n            secretKey,\n            body: {\n                url\n            }\n        });\n    },\n    async requestUpload ({ accessKey, secretKey, bucketName, bucketType, fileInfo, multipart }) {\n        const res = await makeRequest({\n            path: \"/request-upload\",\n            accessKey,\n            secretKey,\n            body: {\n                multipart,\n                bucketName,\n                bucketType,\n                isPublic: fileInfo.isPublic,\n                path: fileInfo.path,\n                extension: fileInfo.extension,\n                size: fileInfo.size,\n                mimeType: fileInfo.type,\n                metadata: fileInfo.metadata,\n                fileName: fileInfo.fileName,\n                replaceTargetUrl: fileInfo.replaceTargetUrl,\n                isTemporary: fileInfo.temporary\n            }\n        });\n        return {\n            multipart: res.multipart,\n            signedUrl: res.signedUrl,\n            accessUrl: res.url,\n            path: res.path,\n            thumbnailUrl: res.thumbnailUrl\n        };\n    },\n    async requestUploadParts ({ accessKey, secretKey, key, multipart }) {\n        const res = await makeRequest({\n            path: \"/request-upload-parts\",\n            accessKey,\n            secretKey,\n            body: {\n                multipart,\n                key\n            }\n        });\n        return {\n            multipart: res.multipart\n        };\n    },\n    async completeMultipartUpload ({ accessKey, secretKey, uploadId, key, parts }) {\n        return await makeRequest({\n            path: \"/complete-multipart-upload\",\n            accessKey,\n            secretKey,\n            body: {\n                uploadId,\n                key,\n                parts\n            }\n        });\n    },\n    async confirmUpload ({ accessKey, secretKey, url }) {\n        return await makeRequest({\n            path: \"/confirm-upload\",\n            accessKey,\n            secretKey,\n            body: {\n                url\n            }\n        });\n    },\n    async deleteFile ({ accessKey, secretKey, url }) {\n        return await makeRequest({\n            path: \"/delete-file\",\n            accessKey,\n            secretKey,\n            body: {\n                url\n            }\n        });\n    },\n    async listFiles ({ accessKey, secretKey, bucketName, filter, pagination }) {\n        return await makeRequest({\n            path: \"/list-files\",\n            accessKey,\n            secretKey,\n            body: {\n                bucketName,\n                filter,\n                pagination\n            }\n        });\n    }\n};\nfunction initEdgeStoreSdk(params) {\n    const { accessKey = process.env.EDGE_STORE_ACCESS_KEY, secretKey = process.env.EDGE_STORE_SECRET_KEY } = params ?? {};\n    if (!accessKey || !secretKey) {\n        throw new EdgeStoreCredentialsError();\n    }\n    return {\n        async getToken (params) {\n            return await edgeStoreRawSdk.getToken({\n                accessKey,\n                secretKey,\n                ctx: params.ctx,\n                router: params.router\n            });\n        },\n        async getFile ({ url }) {\n            return await edgeStoreRawSdk.getFile({\n                accessKey,\n                secretKey,\n                url\n            });\n        },\n        async requestUpload ({ bucketName, bucketType, fileInfo, multipart }) {\n            return await edgeStoreRawSdk.requestUpload({\n                accessKey,\n                secretKey,\n                bucketName,\n                bucketType,\n                fileInfo,\n                multipart\n            });\n        },\n        async requestUploadParts ({ key, multipart }) {\n            return await edgeStoreRawSdk.requestUploadParts({\n                accessKey,\n                secretKey,\n                key,\n                multipart\n            });\n        },\n        async completeMultipartUpload ({ uploadId, key, parts }) {\n            return await edgeStoreRawSdk.completeMultipartUpload({\n                accessKey,\n                secretKey,\n                uploadId,\n                key,\n                parts\n            });\n        },\n        async confirmUpload ({ url }) {\n            return await edgeStoreRawSdk.confirmUpload({\n                accessKey,\n                secretKey,\n                url\n            });\n        },\n        async deleteFile ({ url }) {\n            return await edgeStoreRawSdk.deleteFile({\n                accessKey,\n                secretKey,\n                url\n            });\n        },\n        async listFiles (params) {\n            return await edgeStoreRawSdk.listFiles({\n                accessKey,\n                secretKey,\n                ...params\n            });\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/server/dist/index-30a3741e.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@edgestore/server/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@edgestore/server/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initEdgeStore: () => (/* binding */ initEdgeStore)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n\n/**\n * Creates a Proxy that prints the path to the property when called.\n *\n * Example:\n *\n * ```ts\n * const pathParamProxy = createPathParamProxy();\n * console.log(pathParamProxy.ctx.user.id());\n * // Logs: \"ctx.user.id\"\n * console.log(pathParamProxy.input.type());\n * // Logs: \"input.type\"\n * ```\n */ function createPathParamProxy() {\n    const getPath = (target, _prop)=>{\n        const proxyFunction = ()=>target;\n        return new Proxy(proxyFunction, {\n            get: (_target, propChild)=>{\n                return getPath(`${target}.${String(propChild)}`);\n            }\n        });\n    };\n    return new Proxy(()=>\"\", {\n        get: (_target, prop)=>{\n            return getPath(String(prop));\n        }\n    });\n}\nconst createNewBuilder = (initDef, newDef)=>{\n    const mergedDef = {\n        ...initDef,\n        ...newDef\n    };\n    return createBuilder({\n        type: mergedDef.type\n    }, mergedDef);\n};\nfunction createBuilder(opts, initDef) {\n    const _def = {\n        type: opts.type,\n        input: zod__WEBPACK_IMPORTED_MODULE_0__.z.never(),\n        path: [],\n        metadata: ()=>({}),\n        ...initDef\n    };\n    return {\n        $config: {\n            ctx: undefined\n        },\n        // @ts-expect-error - I think it would be too much work to make this type correct.\n        _def,\n        input (input) {\n            return createNewBuilder(_def, {\n                input\n            });\n        },\n        path (pathResolver) {\n            // TODO: Should throw a runtime error in the followin cases:\n            // 1. in case of multiple keys in one object\n            // 2. in case of duplicate keys\n            const pathParamProxy = createPathParamProxy();\n            const params = pathResolver(pathParamProxy);\n            return createNewBuilder(_def, {\n                path: params\n            });\n        },\n        metadata (metadata) {\n            return createNewBuilder(_def, {\n                metadata\n            });\n        },\n        accessControl (accessControl) {\n            return createNewBuilder(_def, {\n                accessControl: accessControl\n            });\n        },\n        beforeUpload (beforeUpload) {\n            return createNewBuilder(_def, {\n                beforeUpload\n            });\n        },\n        beforeDelete (beforeDelete) {\n            return createNewBuilder(_def, {\n                beforeDelete\n            });\n        }\n    };\n}\nclass EdgeStoreBuilder {\n    context() {\n        return new EdgeStoreBuilder();\n    }\n    create() {\n        return createEdgeStoreInner()();\n    }\n}\nfunction createRouterFactory() {\n    return function createRouterInner(buckets) {\n        return {\n            $config: {\n                ctx: undefined\n            },\n            buckets\n        };\n    };\n}\nfunction initBucket(type, config) {\n    return createBuilder({\n        type\n    }, {\n        bucketConfig: config\n    });\n}\nfunction createEdgeStoreInner() {\n    return function initEdgeStoreInner() {\n        return {\n            /**\n       * Builder object for creating an image bucket\n       */ imageBucket (config) {\n                return initBucket(\"IMAGE\", config);\n            },\n            /**\n       * Builder object for creating a file bucket\n       */ fileBucket (config) {\n                return initBucket(\"FILE\", config);\n            },\n            /**\n       * Create a router\n       */ router: createRouterFactory()\n        };\n    };\n}\n/**\n * Initialize EdgeStore - be done exactly once per backend\n */ const initEdgeStore = new EdgeStoreBuilder(); // ↓↓↓ TYPE TESTS ↓↓↓\n// type Context = {\n//   userId: string;\n//   userRole: 'admin' | 'visitor';\n// };\n// const es = initEdgeStore.context<Context>().create();\n// const imagesBucket = es.imageBucket()\n//   .input(\n//     z.object({\n//       type: z.enum(['profile', 'post']),\n//       extension: z.string().optional(),\n//     }),\n//   )\n//   .path(({ ctx, input }) => [{ author: ctx.userId }, { type: input.type }])\n//   .metadata(({ ctx, input }) => ({\n//     extension: input.extension,\n//     role: ctx.userRole,\n//   }))\n//   .beforeUpload(() => {\n//     return true;\n//   });\n// const a = es.imageBucket()\n//   .input(z.object({ type: z.string(), someMeta: z.string().optional() }))\n//   .path(({ ctx, input }) => [{ author: ctx.userId }, { type: input.type }])\n//   .metadata(({ ctx, input }) => ({\n//     role: ctx.userRole,\n//     someMeta: input.someMeta,\n//   }))\n//   .accessControl({\n//     OR: [\n//       {\n//         userId: { path: 'author' }, // this will check if the userId is the same as the author in the path parameter\n//       },\n//       {\n//         userRole: 'admin', // this is the same as { userRole: { eq: \"admin\" } }\n//       },\n//     ],\n//   })\n//   .beforeUpload(({ ctx, input }) => {\n//     return true;\n//   })\n//   .beforeDelete(({ ctx, file }) => {\n//     return true;\n//   });\n// const b = es.imageBucket().path(({ ctx }) => [{ author: ctx.userId }]);\n// const router = es.router({\n//   original: imagesBucket,\n//   imageBucket: a,\n//   imageBucket2: b,\n// });\n// export { router };\n// type ListFilesResponse<TBucket extends AnyRouter['buckets'][string]> = {\n//   data: {\n//     // url: string;\n//     // size: number;\n//     // uploadedAt: Date;\n//     // metadata: InferMetadataObject<TBucket>;\n//     path: InferBucketPathKeys<TBucket> extends string ? {\n//       [key: string]: string;\n//     } :{\n//       [TKey in InferBucketPathKeys<TBucket>]: string;\n//     };\n//   }[];\n//   pagination: {\n//     currentPage: number;\n//     totalPages: number;\n//     totalCount: number;\n//   };\n// };\n// type TPathKeys = 'author' | 'type';\n// type TPathKeys2 = InferBucketPathKeys<AnyBuilder>;\n// type ObjectWithKeys<TKeys extends string> = {\n//   [TKey in TKeys]: string;\n// };\n// type Test1 = ObjectWithKeys<TPathKeys>;\n// type Test2 = ObjectWithKeys<TPathKeys2>;\n// type PathKeys = InferBucketPathKeys<typeof router.buckets.imageBucket>;\n// type MetadataKeys = InferMetadataObject<typeof router.buckets.imageBucket>;\n// type MyEdgeStoreRouter = typeof router;\n// type MyAccessControl = AccessControlSchema<Context, AnyDef>;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/server/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@edgestore/server/dist/providers/edgestore/index.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@edgestore/server/dist/providers/edgestore/index.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EdgeStoreProvider: () => (/* binding */ EdgeStoreProvider)\n/* harmony export */ });\n/* harmony import */ var _index_30a3741e_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index-30a3741e.mjs */ \"(rsc)/./node_modules/@edgestore/server/dist/index-30a3741e.mjs\");\n\nconst DEFAULT_BASE_URL = \"https://files.edgestore.dev\";\nfunction EdgeStoreProvider(options) {\n    const { accessKey = process.env.EDGE_STORE_ACCESS_KEY, secretKey = process.env.EDGE_STORE_SECRET_KEY } = options ?? {};\n    const baseUrl = process.env.EDGE_STORE_BASE_URL ?? DEFAULT_BASE_URL;\n    if (!accessKey || !secretKey) {\n        throw new _index_30a3741e_mjs__WEBPACK_IMPORTED_MODULE_0__.E();\n    }\n    const edgeStoreSdk = (0,_index_30a3741e_mjs__WEBPACK_IMPORTED_MODULE_0__.i)({\n        accessKey,\n        secretKey\n    });\n    return {\n        init: async ({ ctx, router })=>{\n            const token = await edgeStoreSdk.getToken({\n                ctx,\n                router\n            });\n            return {\n                token\n            };\n        },\n        getBaseUrl () {\n            return baseUrl;\n        },\n        getFile: async ({ url })=>{\n            const { uploadedAt, ...rest } = await edgeStoreSdk.getFile({\n                url\n            });\n            return {\n                uploadedAt: new Date(uploadedAt),\n                ...rest\n            };\n        },\n        async requestUpload ({ bucketName, bucketType, fileInfo }) {\n            // multipart upload if file is bigger than a certain size\n            const MULTIPART_THRESHOLD = 10 * 1024 * 1024; // 10MB\n            let partSize = 5 * 1024 * 1024; // 5MB\n            if (fileInfo.size > MULTIPART_THRESHOLD) {\n                let totalParts = Math.ceil(fileInfo.size / partSize);\n                if (totalParts > 1000) {\n                    // the maximum number of parts is 1000\n                    totalParts = 1000;\n                    partSize = Math.ceil(fileInfo.size / totalParts);\n                }\n                const res = await edgeStoreSdk.requestUpload({\n                    bucketName,\n                    bucketType,\n                    fileInfo,\n                    multipart: {\n                        parts: Array.from({\n                            length: totalParts\n                        }).map((_, index)=>index + 1)\n                    }\n                });\n                const multipart = res.multipart ? {\n                    key: res.multipart.key,\n                    uploadId: res.multipart.uploadId,\n                    parts: res.multipart.parts.map((part)=>({\n                            partNumber: part.partNumber,\n                            uploadUrl: part.signedUrl\n                        })),\n                    partSize,\n                    totalParts\n                } : undefined;\n                if (multipart) {\n                    return {\n                        accessUrl: res.accessUrl,\n                        thumbnailUrl: res.thumbnailUrl,\n                        multipart\n                    };\n                } else if (res.signedUrl) {\n                    return {\n                        accessUrl: res.accessUrl,\n                        uploadUrl: res.signedUrl,\n                        thumbnailUrl: res.thumbnailUrl\n                    };\n                } else {\n                    throw new Error(\"Could not get upload url\");\n                }\n            }\n            const res = await edgeStoreSdk.requestUpload({\n                bucketName,\n                bucketType,\n                fileInfo\n            });\n            if (res.signedUrl) {\n                return {\n                    accessUrl: res.accessUrl,\n                    uploadUrl: res.signedUrl,\n                    thumbnailUrl: res.thumbnailUrl\n                };\n            }\n            throw new Error(\"Could not get upload url\");\n        },\n        requestUploadParts: async ({ multipart, path })=>{\n            const res = await edgeStoreSdk.requestUploadParts({\n                multipart,\n                key: path\n            });\n            return {\n                multipart: {\n                    uploadId: res.multipart.uploadId,\n                    parts: res.multipart.parts.map((part)=>({\n                            partNumber: part.partNumber,\n                            uploadUrl: part.signedUrl\n                        }))\n                }\n            };\n        },\n        completeMultipartUpload: async ({ uploadId, key, parts })=>{\n            return await edgeStoreSdk.completeMultipartUpload({\n                uploadId,\n                key,\n                parts\n            });\n        },\n        confirmUpload: async ({ url })=>{\n            return await edgeStoreSdk.confirmUpload({\n                url\n            });\n        },\n        deleteFile: async ({ url })=>{\n            return await edgeStoreSdk.deleteFile({\n                url\n            });\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVkZ2VzdG9yZS9zZXJ2ZXIvZGlzdC9wcm92aWRlcnMvZWRnZXN0b3JlL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRztBQUVqRyxNQUFNSSxtQkFBbUI7QUFDekIsU0FBU0Msa0JBQWtCQyxPQUFPO0lBQzlCLE1BQU0sRUFBRUMsWUFBWUMsUUFBUUMsR0FBRyxDQUFDQyxxQkFBcUIsRUFBRUMsWUFBWUgsUUFBUUMsR0FBRyxDQUFDRyxxQkFBcUIsRUFBRSxHQUFHTixXQUFXLENBQUM7SUFDckgsTUFBTU8sVUFBVUwsUUFBUUMsR0FBRyxDQUFDSyxtQkFBbUIsSUFBSVY7SUFDbkQsSUFBSSxDQUFDRyxhQUFhLENBQUNJLFdBQVc7UUFDMUIsTUFBTSxJQUFJVixrREFBeUJBO0lBQ3ZDO0lBQ0EsTUFBTWMsZUFBZVosc0RBQWdCQSxDQUFDO1FBQ2xDSTtRQUNBSTtJQUNKO0lBQ0EsT0FBTztRQUNISyxNQUFNLE9BQU8sRUFBRUMsR0FBRyxFQUFFQyxNQUFNLEVBQUU7WUFDeEIsTUFBTUMsUUFBUSxNQUFNSixhQUFhSyxRQUFRLENBQUM7Z0JBQ3RDSDtnQkFDQUM7WUFDSjtZQUNBLE9BQU87Z0JBQ0hDO1lBQ0o7UUFDSjtRQUNBRTtZQUNJLE9BQU9SO1FBQ1g7UUFDQVMsU0FBUyxPQUFPLEVBQUVDLEdBQUcsRUFBRTtZQUNuQixNQUFNLEVBQUVDLFVBQVUsRUFBRSxHQUFHQyxNQUFNLEdBQUcsTUFBTVYsYUFBYU8sT0FBTyxDQUFDO2dCQUN2REM7WUFDSjtZQUNBLE9BQU87Z0JBQ0hDLFlBQVksSUFBSUUsS0FBS0Y7Z0JBQ3JCLEdBQUdDLElBQUk7WUFDWDtRQUNKO1FBQ0EsTUFBTUUsZUFBZSxFQUFFQyxVQUFVLEVBQUVDLFVBQVUsRUFBRUMsUUFBUSxFQUFFO1lBQ3JELHlEQUF5RDtZQUN6RCxNQUFNQyxzQkFBc0IsS0FBSyxPQUFPLE1BQU0sT0FBTztZQUNyRCxJQUFJQyxXQUFXLElBQUksT0FBTyxNQUFNLE1BQU07WUFDdEMsSUFBSUYsU0FBU0csSUFBSSxHQUFHRixxQkFBcUI7Z0JBQ3JDLElBQUlHLGFBQWFDLEtBQUtDLElBQUksQ0FBQ04sU0FBU0csSUFBSSxHQUFHRDtnQkFDM0MsSUFBSUUsYUFBYSxNQUFNO29CQUNuQixzQ0FBc0M7b0JBQ3RDQSxhQUFhO29CQUNiRixXQUFXRyxLQUFLQyxJQUFJLENBQUNOLFNBQVNHLElBQUksR0FBR0M7Z0JBQ3pDO2dCQUNBLE1BQU1HLE1BQU0sTUFBTXRCLGFBQWFZLGFBQWEsQ0FBQztvQkFDekNDO29CQUNBQztvQkFDQUM7b0JBQ0FRLFdBQVc7d0JBQ1BDLE9BQU9DLE1BQU1DLElBQUksQ0FBQzs0QkFDZEMsUUFBUVI7d0JBQ1osR0FBR1MsR0FBRyxDQUFDLENBQUNDLEdBQUdDLFFBQVFBLFFBQVE7b0JBQy9CO2dCQUNKO2dCQUNBLE1BQU1QLFlBQVlELElBQUlDLFNBQVMsR0FBRztvQkFDOUJRLEtBQUtULElBQUlDLFNBQVMsQ0FBQ1EsR0FBRztvQkFDdEJDLFVBQVVWLElBQUlDLFNBQVMsQ0FBQ1MsUUFBUTtvQkFDaENSLE9BQU9GLElBQUlDLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDSSxHQUFHLENBQUMsQ0FBQ0ssT0FBUTs0QkFDaENDLFlBQVlELEtBQUtDLFVBQVU7NEJBQzNCQyxXQUFXRixLQUFLRyxTQUFTO3dCQUM3QjtvQkFDSm5CO29CQUNBRTtnQkFDSixJQUFJa0I7Z0JBQ0osSUFBSWQsV0FBVztvQkFDWCxPQUFPO3dCQUNIZSxXQUFXaEIsSUFBSWdCLFNBQVM7d0JBQ3hCQyxjQUFjakIsSUFBSWlCLFlBQVk7d0JBQzlCaEI7b0JBQ0o7Z0JBQ0osT0FBTyxJQUFJRCxJQUFJYyxTQUFTLEVBQUU7b0JBQ3RCLE9BQU87d0JBQ0hFLFdBQVdoQixJQUFJZ0IsU0FBUzt3QkFDeEJILFdBQVdiLElBQUljLFNBQVM7d0JBQ3hCRyxjQUFjakIsSUFBSWlCLFlBQVk7b0JBQ2xDO2dCQUNKLE9BQU87b0JBQ0gsTUFBTSxJQUFJQyxNQUFNO2dCQUNwQjtZQUNKO1lBQ0EsTUFBTWxCLE1BQU0sTUFBTXRCLGFBQWFZLGFBQWEsQ0FBQztnQkFDekNDO2dCQUNBQztnQkFDQUM7WUFDSjtZQUNBLElBQUlPLElBQUljLFNBQVMsRUFBRTtnQkFDZixPQUFPO29CQUNIRSxXQUFXaEIsSUFBSWdCLFNBQVM7b0JBQ3hCSCxXQUFXYixJQUFJYyxTQUFTO29CQUN4QkcsY0FBY2pCLElBQUlpQixZQUFZO2dCQUNsQztZQUNKO1lBQ0EsTUFBTSxJQUFJQyxNQUFNO1FBQ3BCO1FBQ0FDLG9CQUFvQixPQUFPLEVBQUVsQixTQUFTLEVBQUVtQixJQUFJLEVBQUU7WUFDMUMsTUFBTXBCLE1BQU0sTUFBTXRCLGFBQWF5QyxrQkFBa0IsQ0FBQztnQkFDOUNsQjtnQkFDQVEsS0FBS1c7WUFDVDtZQUNBLE9BQU87Z0JBQ0huQixXQUFXO29CQUNQUyxVQUFVVixJQUFJQyxTQUFTLENBQUNTLFFBQVE7b0JBQ2hDUixPQUFPRixJQUFJQyxTQUFTLENBQUNDLEtBQUssQ0FBQ0ksR0FBRyxDQUFDLENBQUNLLE9BQVE7NEJBQ2hDQyxZQUFZRCxLQUFLQyxVQUFVOzRCQUMzQkMsV0FBV0YsS0FBS0csU0FBUzt3QkFDN0I7Z0JBQ1I7WUFDSjtRQUNKO1FBQ0FPLHlCQUF5QixPQUFPLEVBQUVYLFFBQVEsRUFBRUQsR0FBRyxFQUFFUCxLQUFLLEVBQUU7WUFDcEQsT0FBTyxNQUFNeEIsYUFBYTJDLHVCQUF1QixDQUFDO2dCQUM5Q1g7Z0JBQ0FEO2dCQUNBUDtZQUNKO1FBQ0o7UUFDQW9CLGVBQWUsT0FBTyxFQUFFcEMsR0FBRyxFQUFFO1lBQ3pCLE9BQU8sTUFBTVIsYUFBYTRDLGFBQWEsQ0FBQztnQkFDcENwQztZQUNKO1FBQ0o7UUFDQXFDLFlBQVksT0FBTyxFQUFFckMsR0FBRyxFQUFFO1lBQ3RCLE9BQU8sTUFBTVIsYUFBYTZDLFVBQVUsQ0FBQztnQkFDakNyQztZQUNKO1FBQ0o7SUFDSjtBQUNKO0FBRTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVuYm9hcmQvLi9ub2RlX21vZHVsZXMvQGVkZ2VzdG9yZS9zZXJ2ZXIvZGlzdC9wcm92aWRlcnMvZWRnZXN0b3JlL2luZGV4Lm1qcz9iMzdkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEUgYXMgRWRnZVN0b3JlQ3JlZGVudGlhbHNFcnJvciwgaSBhcyBpbml0RWRnZVN0b3JlU2RrIH0gZnJvbSAnLi4vLi4vaW5kZXgtMzBhMzc0MWUubWpzJztcblxuY29uc3QgREVGQVVMVF9CQVNFX1VSTCA9ICdodHRwczovL2ZpbGVzLmVkZ2VzdG9yZS5kZXYnO1xuZnVuY3Rpb24gRWRnZVN0b3JlUHJvdmlkZXIob3B0aW9ucykge1xuICAgIGNvbnN0IHsgYWNjZXNzS2V5ID0gcHJvY2Vzcy5lbnYuRURHRV9TVE9SRV9BQ0NFU1NfS0VZLCBzZWNyZXRLZXkgPSBwcm9jZXNzLmVudi5FREdFX1NUT1JFX1NFQ1JFVF9LRVkgfSA9IG9wdGlvbnMgPz8ge307XG4gICAgY29uc3QgYmFzZVVybCA9IHByb2Nlc3MuZW52LkVER0VfU1RPUkVfQkFTRV9VUkwgPz8gREVGQVVMVF9CQVNFX1VSTDtcbiAgICBpZiAoIWFjY2Vzc0tleSB8fCAhc2VjcmV0S2V5KSB7XG4gICAgICAgIHRocm93IG5ldyBFZGdlU3RvcmVDcmVkZW50aWFsc0Vycm9yKCk7XG4gICAgfVxuICAgIGNvbnN0IGVkZ2VTdG9yZVNkayA9IGluaXRFZGdlU3RvcmVTZGsoe1xuICAgICAgICBhY2Nlc3NLZXksXG4gICAgICAgIHNlY3JldEtleVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQ6IGFzeW5jICh7IGN0eCwgcm91dGVyIH0pPT57XG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IGVkZ2VTdG9yZVNkay5nZXRUb2tlbih7XG4gICAgICAgICAgICAgICAgY3R4LFxuICAgICAgICAgICAgICAgIHJvdXRlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRva2VuXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBnZXRCYXNlVXJsICgpIHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlVXJsO1xuICAgICAgICB9LFxuICAgICAgICBnZXRGaWxlOiBhc3luYyAoeyB1cmwgfSk9PntcbiAgICAgICAgICAgIGNvbnN0IHsgdXBsb2FkZWRBdCwgLi4ucmVzdCB9ID0gYXdhaXQgZWRnZVN0b3JlU2RrLmdldEZpbGUoe1xuICAgICAgICAgICAgICAgIHVybFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVwbG9hZGVkQXQ6IG5ldyBEYXRlKHVwbG9hZGVkQXQpLFxuICAgICAgICAgICAgICAgIC4uLnJlc3RcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHJlcXVlc3RVcGxvYWQgKHsgYnVja2V0TmFtZSwgYnVja2V0VHlwZSwgZmlsZUluZm8gfSkge1xuICAgICAgICAgICAgLy8gbXVsdGlwYXJ0IHVwbG9hZCBpZiBmaWxlIGlzIGJpZ2dlciB0aGFuIGEgY2VydGFpbiBzaXplXG4gICAgICAgICAgICBjb25zdCBNVUxUSVBBUlRfVEhSRVNIT0xEID0gMTAgKiAxMDI0ICogMTAyNDsgLy8gMTBNQlxuICAgICAgICAgICAgbGV0IHBhcnRTaXplID0gNSAqIDEwMjQgKiAxMDI0OyAvLyA1TUJcbiAgICAgICAgICAgIGlmIChmaWxlSW5mby5zaXplID4gTVVMVElQQVJUX1RIUkVTSE9MRCkge1xuICAgICAgICAgICAgICAgIGxldCB0b3RhbFBhcnRzID0gTWF0aC5jZWlsKGZpbGVJbmZvLnNpemUgLyBwYXJ0U2l6ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRvdGFsUGFydHMgPiAxMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBtYXhpbXVtIG51bWJlciBvZiBwYXJ0cyBpcyAxMDAwXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsUGFydHMgPSAxMDAwO1xuICAgICAgICAgICAgICAgICAgICBwYXJ0U2l6ZSA9IE1hdGguY2VpbChmaWxlSW5mby5zaXplIC8gdG90YWxQYXJ0cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGVkZ2VTdG9yZVNkay5yZXF1ZXN0VXBsb2FkKHtcbiAgICAgICAgICAgICAgICAgICAgYnVja2V0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgYnVja2V0VHlwZSxcbiAgICAgICAgICAgICAgICAgICAgZmlsZUluZm8sXG4gICAgICAgICAgICAgICAgICAgIG11bHRpcGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydHM6IEFycmF5LmZyb20oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aDogdG90YWxQYXJ0c1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkubWFwKChfLCBpbmRleCk9PmluZGV4ICsgMSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IG11bHRpcGFydCA9IHJlcy5tdWx0aXBhcnQgPyB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogcmVzLm11bHRpcGFydC5rZXksXG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZElkOiByZXMubXVsdGlwYXJ0LnVwbG9hZElkLFxuICAgICAgICAgICAgICAgICAgICBwYXJ0czogcmVzLm11bHRpcGFydC5wYXJ0cy5tYXAoKHBhcnQpPT4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnROdW1iZXI6IHBhcnQucGFydE51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRVcmw6IHBhcnQuc2lnbmVkVXJsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgIHBhcnRTaXplLFxuICAgICAgICAgICAgICAgICAgICB0b3RhbFBhcnRzXG4gICAgICAgICAgICAgICAgfSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAobXVsdGlwYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NVcmw6IHJlcy5hY2Nlc3NVcmwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWxVcmw6IHJlcy50aHVtYm5haWxVcmwsXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBhcnRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcy5zaWduZWRVcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc1VybDogcmVzLmFjY2Vzc1VybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZFVybDogcmVzLnNpZ25lZFVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbFVybDogcmVzLnRodW1ibmFpbFVybFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGdldCB1cGxvYWQgdXJsJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZWRnZVN0b3JlU2RrLnJlcXVlc3RVcGxvYWQoe1xuICAgICAgICAgICAgICAgIGJ1Y2tldE5hbWUsXG4gICAgICAgICAgICAgICAgYnVja2V0VHlwZSxcbiAgICAgICAgICAgICAgICBmaWxlSW5mb1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAocmVzLnNpZ25lZFVybCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGFjY2Vzc1VybDogcmVzLmFjY2Vzc1VybCxcbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkVXJsOiByZXMuc2lnbmVkVXJsLFxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWxVcmw6IHJlcy50aHVtYm5haWxVcmxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZ2V0IHVwbG9hZCB1cmwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVxdWVzdFVwbG9hZFBhcnRzOiBhc3luYyAoeyBtdWx0aXBhcnQsIHBhdGggfSk9PntcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGVkZ2VTdG9yZVNkay5yZXF1ZXN0VXBsb2FkUGFydHMoe1xuICAgICAgICAgICAgICAgIG11bHRpcGFydCxcbiAgICAgICAgICAgICAgICBrZXk6IHBhdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtdWx0aXBhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkSWQ6IHJlcy5tdWx0aXBhcnQudXBsb2FkSWQsXG4gICAgICAgICAgICAgICAgICAgIHBhcnRzOiByZXMubXVsdGlwYXJ0LnBhcnRzLm1hcCgocGFydCk9Pih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydE51bWJlcjogcGFydC5wYXJ0TnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZFVybDogcGFydC5zaWduZWRVcmxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBsZXRlTXVsdGlwYXJ0VXBsb2FkOiBhc3luYyAoeyB1cGxvYWRJZCwga2V5LCBwYXJ0cyB9KT0+e1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGVkZ2VTdG9yZVNkay5jb21wbGV0ZU11bHRpcGFydFVwbG9hZCh7XG4gICAgICAgICAgICAgICAgdXBsb2FkSWQsXG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIHBhcnRzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlybVVwbG9hZDogYXN5bmMgKHsgdXJsIH0pPT57XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgZWRnZVN0b3JlU2RrLmNvbmZpcm1VcGxvYWQoe1xuICAgICAgICAgICAgICAgIHVybFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlbGV0ZUZpbGU6IGFzeW5jICh7IHVybCB9KT0+e1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGVkZ2VTdG9yZVNkay5kZWxldGVGaWxlKHtcbiAgICAgICAgICAgICAgICB1cmxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgRWRnZVN0b3JlUHJvdmlkZXIgfTtcbiJdLCJuYW1lcyI6WyJFIiwiRWRnZVN0b3JlQ3JlZGVudGlhbHNFcnJvciIsImkiLCJpbml0RWRnZVN0b3JlU2RrIiwiREVGQVVMVF9CQVNFX1VSTCIsIkVkZ2VTdG9yZVByb3ZpZGVyIiwib3B0aW9ucyIsImFjY2Vzc0tleSIsInByb2Nlc3MiLCJlbnYiLCJFREdFX1NUT1JFX0FDQ0VTU19LRVkiLCJzZWNyZXRLZXkiLCJFREdFX1NUT1JFX1NFQ1JFVF9LRVkiLCJiYXNlVXJsIiwiRURHRV9TVE9SRV9CQVNFX1VSTCIsImVkZ2VTdG9yZVNkayIsImluaXQiLCJjdHgiLCJyb3V0ZXIiLCJ0b2tlbiIsImdldFRva2VuIiwiZ2V0QmFzZVVybCIsImdldEZpbGUiLCJ1cmwiLCJ1cGxvYWRlZEF0IiwicmVzdCIsIkRhdGUiLCJyZXF1ZXN0VXBsb2FkIiwiYnVja2V0TmFtZSIsImJ1Y2tldFR5cGUiLCJmaWxlSW5mbyIsIk1VTFRJUEFSVF9USFJFU0hPTEQiLCJwYXJ0U2l6ZSIsInNpemUiLCJ0b3RhbFBhcnRzIiwiTWF0aCIsImNlaWwiLCJyZXMiLCJtdWx0aXBhcnQiLCJwYXJ0cyIsIkFycmF5IiwiZnJvbSIsImxlbmd0aCIsIm1hcCIsIl8iLCJpbmRleCIsImtleSIsInVwbG9hZElkIiwicGFydCIsInBhcnROdW1iZXIiLCJ1cGxvYWRVcmwiLCJzaWduZWRVcmwiLCJ1bmRlZmluZWQiLCJhY2Nlc3NVcmwiLCJ0aHVtYm5haWxVcmwiLCJFcnJvciIsInJlcXVlc3RVcGxvYWRQYXJ0cyIsInBhdGgiLCJjb21wbGV0ZU11bHRpcGFydFVwbG9hZCIsImNvbmZpcm1VcGxvYWQiLCJkZWxldGVGaWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/server/dist/providers/edgestore/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@edgestore/server/dist/shared-6dea9e91.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@edgestore/server/dist/shared-6dea9e91.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   E: () => (/* binding */ EdgeStoreError),\n/* harmony export */   a: () => (/* binding */ requestUploadParts),\n/* harmony export */   b: () => (/* binding */ confirmUpload),\n/* harmony export */   c: () => (/* binding */ completeMultipartUpload),\n/* harmony export */   d: () => (/* binding */ deleteFile),\n/* harmony export */   e: () => (/* binding */ EDGE_STORE_ERROR_CODES),\n/* harmony export */   i: () => (/* binding */ init),\n/* harmony export */   r: () => (/* binding */ requestUpload)\n/* harmony export */ });\n/* harmony import */ var _panva_hkdf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @panva/hkdf */ \"(rsc)/./node_modules/@panva/hkdf/dist/node/esm/index.js\");\n/* harmony import */ var cookie__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cookie */ \"(rsc)/./node_modules/cookie/index.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/esm/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_define_property */ \"(rsc)/./node_modules/@swc/helpers/cjs/_define_property.cjs\");\n\n\n\n\n\nconst EDGE_STORE_ERROR_CODES = {\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401\n};\nclass EdgeStoreError extends Error {\n    constructor(opts){\n        super(opts.message);\n        (0,_swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_3__._)(this, \"cause\", void 0);\n        (0,_swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_3__._)(this, \"code\", void 0);\n        this.name = \"EdgeStoreError\";\n        this.code = opts.code;\n        this.cause = opts.cause;\n    }\n}\nconst IMAGE_MIME_TYPES = [\n    \"image/jpeg\",\n    \"image/png\",\n    \"image/gif\",\n    \"image/webp\",\n    \"image/svg+xml\",\n    \"image/tiff\",\n    \"image/bmp\",\n    \"image/x-icon\"\n];\n// TODO: change it to 1 hour when we have a way to refresh the token\nconst DEFAULT_MAX_AGE = 30 * 24 * 60 * 60; // 30 days\nasync function init(params) {\n    const { ctx, provider, router } = params;\n    const ctxToken = await encryptJWT(ctx);\n    const { token } = await provider.init({\n        ctx,\n        router: router\n    });\n    const newCookies = [\n        (0,cookie__WEBPACK_IMPORTED_MODULE_1__.serialize)(\"edgestore-ctx\", ctxToken, {\n            path: \"/\",\n            maxAge: DEFAULT_MAX_AGE\n        })\n    ];\n    if (token) {\n        newCookies.push((0,cookie__WEBPACK_IMPORTED_MODULE_1__.serialize)(\"edgestore-token\", token, {\n            path: \"/\",\n            maxAge: DEFAULT_MAX_AGE\n        }));\n    }\n    const baseUrl = await provider.getBaseUrl();\n    return {\n        newCookies,\n        token,\n        baseUrl\n    };\n}\nasync function requestUpload(params) {\n    const { provider, router, ctxToken, body: { bucketName, input, fileInfo } } = params;\n    if (!ctxToken) {\n        throw new EdgeStoreError({\n            message: \"Missing edgestore-ctx cookie\",\n            code: \"UNAUTHORIZED\"\n        });\n    }\n    const ctx = await getContext(ctxToken);\n    const bucket = router.buckets[bucketName];\n    if (!bucket) {\n        throw new Error(`Bucket ${bucketName} not found`);\n    }\n    if (bucket._def.beforeUpload) {\n        const canUpload = await bucket._def.beforeUpload?.({\n            ctx,\n            input,\n            fileInfo: {\n                size: fileInfo.size,\n                type: fileInfo.type,\n                fileName: fileInfo.fileName,\n                extension: fileInfo.extension,\n                replaceTargetUrl: fileInfo.replaceTargetUrl,\n                temporary: fileInfo.temporary\n            }\n        });\n        if (!canUpload) {\n            throw new Error(\"Upload not allowed\");\n        }\n    }\n    if (bucket._def.type === \"IMAGE\") {\n        if (!IMAGE_MIME_TYPES.includes(fileInfo.type)) {\n            throw new EdgeStoreError({\n                code: \"BAD_REQUEST\",\n                message: \"Only images are allowed in this bucket\"\n            });\n        }\n    }\n    if (bucket._def.bucketConfig?.maxSize) {\n        if (fileInfo.size > bucket._def.bucketConfig.maxSize) {\n            throw new EdgeStoreError({\n                code: \"BAD_REQUEST\",\n                message: `File size is too big. Max size is ${bucket._def.bucketConfig.maxSize}`\n            });\n        }\n    }\n    if (bucket._def.bucketConfig?.accept) {\n        const accept = bucket._def.bucketConfig.accept;\n        let accepted = false;\n        for (const acceptedMimeType of accept){\n            if (acceptedMimeType.endsWith(\"/*\")) {\n                const mimeType = acceptedMimeType.replace(\"/*\", \"\");\n                if (fileInfo.type.startsWith(mimeType)) {\n                    accepted = true;\n                    break;\n                }\n            } else if (fileInfo.type === acceptedMimeType) {\n                accepted = true;\n                break;\n            }\n        }\n        if (!accepted) {\n            throw new EdgeStoreError({\n                code: \"BAD_REQUEST\",\n                message: `\"${fileInfo.type}\" is not allowed. Accepted types are ${JSON.stringify(accept)}`\n            });\n        }\n    }\n    const path = buildPath({\n        fileInfo,\n        bucket,\n        pathAttrs: {\n            ctx,\n            input\n        }\n    });\n    const metadata = await bucket._def.metadata?.({\n        ctx,\n        input\n    });\n    const isPublic = bucket._def.accessControl === undefined;\n    const requestUploadRes = await provider.requestUpload({\n        bucketName,\n        bucketType: bucket._def.type,\n        fileInfo: {\n            ...fileInfo,\n            path,\n            isPublic,\n            metadata\n        }\n    });\n    const parsedPath = path.reduce((acc, curr)=>{\n        acc[curr.key] = curr.value;\n        return acc;\n    }, {});\n    const pathOrder = path.map((p)=>p.key);\n    return {\n        ...requestUploadRes,\n        size: fileInfo.size,\n        uploadedAt: new Date().toISOString(),\n        path: parsedPath,\n        pathOrder,\n        metadata\n    };\n}\nasync function requestUploadParts(params) {\n    const { provider, router, ctxToken, body: { multipart, path } } = params;\n    if (!ctxToken) {\n        throw new EdgeStoreError({\n            message: \"Missing edgestore-ctx cookie\",\n            code: \"UNAUTHORIZED\"\n        });\n    }\n    await getContext(ctxToken); // just to check if the token is valid\n    const bucket = router.buckets[multipart.uploadId];\n    if (!bucket) {\n        throw new Error(`Bucket ${multipart.uploadId} not found`);\n    }\n    return await provider.requestUploadParts({\n        multipart,\n        path\n    });\n}\nasync function completeMultipartUpload(params) {\n    const { provider, router, ctxToken, body: { bucketName, uploadId, key, parts } } = params;\n    if (!ctxToken) {\n        throw new EdgeStoreError({\n            message: \"Missing edgestore-ctx cookie\",\n            code: \"UNAUTHORIZED\"\n        });\n    }\n    await getContext(ctxToken); // just to check if the token is valid\n    const bucket = router.buckets[bucketName];\n    if (!bucket) {\n        throw new Error(`Bucket ${bucketName} not found`);\n    }\n    return await provider.completeMultipartUpload({\n        uploadId,\n        key,\n        parts\n    });\n}\nasync function confirmUpload(params) {\n    const { provider, router, ctxToken, body: { bucketName, url } } = params;\n    if (!ctxToken) {\n        throw new EdgeStoreError({\n            message: \"Missing edgestore-ctx cookie\",\n            code: \"UNAUTHORIZED\"\n        });\n    }\n    await getContext(ctxToken); // just to check if the token is valid\n    const bucket = router.buckets[bucketName];\n    if (!bucket) {\n        throw new Error(`Bucket ${bucketName} not found`);\n    }\n    return await provider.confirmUpload({\n        bucket,\n        url: unproxyUrl(url)\n    });\n}\nasync function deleteFile(params) {\n    const { provider, router, ctxToken, body: { bucketName, url } } = params;\n    if (!ctxToken) {\n        throw new EdgeStoreError({\n            message: \"Missing edgestore-ctx cookie\",\n            code: \"UNAUTHORIZED\"\n        });\n    }\n    const ctx = await getContext(ctxToken);\n    const bucket = router.buckets[bucketName];\n    if (!bucket) {\n        throw new Error(`Bucket ${bucketName} not found`);\n    }\n    if (!bucket._def.beforeDelete) {\n        throw new Error(\"You need to define beforeDelete if you want to delete files directly from the frontend.\");\n    }\n    const fileInfo = await provider.getFile({\n        url\n    });\n    const canDelete = await bucket._def.beforeDelete({\n        ctx,\n        fileInfo\n    });\n    if (!canDelete) {\n        throw new Error(\"Delete not allowed\");\n    }\n    return await provider.deleteFile({\n        bucket,\n        url: unproxyUrl(url)\n    });\n}\nasync function encryptJWT(ctx) {\n    const secret = process.env.EDGE_STORE_JWT_SECRET ?? process.env.EDGE_STORE_SECRET_KEY;\n    if (!secret) {\n        throw new Error(\"EDGE_STORE_JWT_SECRET or EDGE_STORE_SECRET_KEY is not defined\");\n    }\n    const encryptionSecret = await getDerivedEncryptionKey(secret);\n    return await new jose__WEBPACK_IMPORTED_MODULE_2__.EncryptJWT(ctx).setProtectedHeader({\n        alg: \"dir\",\n        enc: \"A256GCM\"\n    }).setIssuedAt().setExpirationTime(Date.now() / 1000 + DEFAULT_MAX_AGE).setJti((0,uuid__WEBPACK_IMPORTED_MODULE_4__[\"default\"])()).encrypt(encryptionSecret);\n}\nasync function decryptJWT(token) {\n    const secret = process.env.EDGE_STORE_JWT_SECRET ?? process.env.EDGE_STORE_SECRET_KEY;\n    if (!secret) {\n        throw new Error(\"EDGE_STORE_JWT_SECRET or EDGE_STORE_SECRET_KEY is not set\");\n    }\n    const encryptionSecret = await getDerivedEncryptionKey(secret);\n    const { payload } = await (0,jose__WEBPACK_IMPORTED_MODULE_2__.jwtDecrypt)(token, encryptionSecret, {\n        clockTolerance: 15\n    });\n    return payload;\n}\nasync function getDerivedEncryptionKey(secret) {\n    return await (0,_panva_hkdf__WEBPACK_IMPORTED_MODULE_0__.hkdf)(\"sha256\", secret, \"\", \"Edge Store Generated Encryption Key\", 32);\n}\nfunction buildPath(params) {\n    const { bucket } = params;\n    const pathParams = bucket._def.path;\n    const path = pathParams.map((param)=>{\n        const paramEntries = Object.entries(param);\n        if (paramEntries[0] === undefined) {\n            throw new Error(\"Missing path param\");\n        }\n        const [key, value] = paramEntries[0];\n        // this is a string like: \"ctx.xxx\" or \"input.yyy.zzz\"\n        const currParamVal = value().split(\".\").reduce((acc2, key)=>{\n            if (acc2[key] === undefined) {\n                throw new Error(`Missing key ${key} in ${JSON.stringify(acc2)}`);\n            }\n            return acc2[key];\n        }, params.pathAttrs);\n        return {\n            key,\n            value: currParamVal\n        };\n    });\n    return path;\n}\nasync function getContext(token) {\n    if (!token) {\n        throw new Error(\"No token\");\n    }\n    return await decryptJWT(token);\n}\n/**\n * On local development, protected files are proxied to the server,\n * which changes the original URL.\n *\n * This function is used to get the original URL,\n * so that we can delete or confirm the upload.\n */ function unproxyUrl(url) {\n    if ( true && url.startsWith(\"http://\")) {\n        // get the url param from the query string\n        const urlParam = new URL(url).searchParams.get(\"url\");\n        if (urlParam) {\n            return urlParam;\n        }\n    }\n    return url;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/server/dist/shared-6dea9e91.mjs\n");

/***/ })

};
;